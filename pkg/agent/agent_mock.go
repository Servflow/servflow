// Code generated by MockGen. DO NOT EDIT.
// Source: agent.go
//
// Generated by this command:
//
//	mockgen -source agent.go -destination agent_mock.go -package agent
//

// Package agent is a generated GoMock package.
package agent

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockToolManager is a mock of ToolManager interface.
type MockToolManager struct {
	ctrl     *gomock.Controller
	recorder *MockToolManagerMockRecorder
}

// MockToolManagerMockRecorder is the mock recorder for MockToolManager.
type MockToolManagerMockRecorder struct {
	mock *MockToolManager
}

// NewMockToolManager creates a new mock instance.
func NewMockToolManager(ctrl *gomock.Controller) *MockToolManager {
	mock := &MockToolManager{ctrl: ctrl}
	mock.recorder = &MockToolManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockToolManager) EXPECT() *MockToolManagerMockRecorder {
	return m.recorder
}

// CallTool mocks base method.
func (m *MockToolManager) CallTool(ctx context.Context, toolName string, params map[string]any) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallTool", ctx, toolName, params)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallTool indicates an expected call of CallTool.
func (mr *MockToolManagerMockRecorder) CallTool(ctx, toolName, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallTool", reflect.TypeOf((*MockToolManager)(nil).CallTool), ctx, toolName, params)
}

// ToolList mocks base method.
func (m *MockToolManager) ToolList() []ToolInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToolList")
	ret0, _ := ret[0].([]ToolInfo)
	return ret0
}

// ToolList indicates an expected call of ToolList.
func (mr *MockToolManagerMockRecorder) ToolList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToolList", reflect.TypeOf((*MockToolManager)(nil).ToolList))
}

// ToolListDescription mocks base method.
func (m *MockToolManager) ToolListDescription() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToolListDescription")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToolListDescription indicates an expected call of ToolListDescription.
func (mr *MockToolManagerMockRecorder) ToolListDescription() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToolListDescription", reflect.TypeOf((*MockToolManager)(nil).ToolListDescription))
}

// MockLLmProvider is a mock of LLmProvider interface.
type MockLLmProvider struct {
	ctrl     *gomock.Controller
	recorder *MockLLmProviderMockRecorder
}

// MockLLmProviderMockRecorder is the mock recorder for MockLLmProvider.
type MockLLmProviderMockRecorder struct {
	mock *MockLLmProvider
}

// NewMockLLmProvider creates a new mock instance.
func NewMockLLmProvider(ctrl *gomock.Controller) *MockLLmProvider {
	mock := &MockLLmProvider{ctrl: ctrl}
	mock.recorder = &MockLLmProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLLmProvider) EXPECT() *MockLLmProviderMockRecorder {
	return m.recorder
}

// ProvideResponse mocks base method.
func (m *MockLLmProvider) ProvideResponse(ctx context.Context, req LLMRequest) (LLMResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProvideResponse", ctx, req)
	ret0, _ := ret[0].(LLMResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProvideResponse indicates an expected call of ProvideResponse.
func (mr *MockLLmProviderMockRecorder) ProvideResponse(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProvideResponse", reflect.TypeOf((*MockLLmProvider)(nil).ProvideResponse), ctx, req)
}

// MockOutputMessages is a mock of OutputMessages interface.
type MockOutputMessages struct {
	ctrl     *gomock.Controller
	recorder *MockOutputMessagesMockRecorder
}

// MockOutputMessagesMockRecorder is the mock recorder for MockOutputMessages.
type MockOutputMessagesMockRecorder struct {
	mock *MockOutputMessages
}

// NewMockOutputMessages creates a new mock instance.
func NewMockOutputMessages(ctrl *gomock.Controller) *MockOutputMessages {
	mock := &MockOutputMessages{ctrl: ctrl}
	mock.recorder = &MockOutputMessagesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOutputMessages) EXPECT() *MockOutputMessagesMockRecorder {
	return m.recorder
}

// Serialize mocks base method.
func (m *MockOutputMessages) Serialize() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Serialize")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Serialize indicates an expected call of Serialize.
func (mr *MockOutputMessagesMockRecorder) Serialize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Serialize", reflect.TypeOf((*MockOutputMessages)(nil).Serialize))
}
