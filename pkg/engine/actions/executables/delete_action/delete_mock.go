// Code generated by MockGen. DO NOT EDIT.
// Source: delete.go
//
// Generated by this command:
//
//	mockgen -source delete.go -destination delete_mock.go -package delete_action
//

// Package delete_action is a generated GoMock package.
package delete_action

import (
	context "context"
	reflect "reflect"

	filters "github.com/Servflow/servflow/pkg/engine/integration/integrations/filters"
	gomock "go.uber.org/mock/gomock"
)

// MockdeleteImplementation is a mock of deleteImplementation interface.
type MockdeleteImplementation struct {
	ctrl     *gomock.Controller
	recorder *MockdeleteImplementationMockRecorder
}

// MockdeleteImplementationMockRecorder is the mock recorder for MockdeleteImplementation.
type MockdeleteImplementationMockRecorder struct {
	mock *MockdeleteImplementation
}

// NewMockdeleteImplementation creates a new mock instance.
func NewMockdeleteImplementation(ctrl *gomock.Controller) *MockdeleteImplementation {
	mock := &MockdeleteImplementation{ctrl: ctrl}
	mock.recorder = &MockdeleteImplementationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockdeleteImplementation) EXPECT() *MockdeleteImplementationMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockdeleteImplementation) Delete(ctx context.Context, options map[string]string, filters ...filters.Filter) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, options}
	for _, a := range filters {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockdeleteImplementationMockRecorder) Delete(ctx, options any, filters ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, options}, filters...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockdeleteImplementation)(nil).Delete), varargs...)
}

// Type mocks base method.
func (m *MockdeleteImplementation) Type() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(string)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockdeleteImplementationMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockdeleteImplementation)(nil).Type))
}
