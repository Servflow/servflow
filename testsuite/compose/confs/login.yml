id: login
http:
  listenPath: login
  method: POST
  next: $conditional.validate
conditionals:
  validate:
    expression: |
      {{ and
      (notempty (param "email") "Email")
      (notempty (param "password") "Password")
      }}
    invalidPath: $response.malformed
    validPath: $action.fetchemail
  passwordMatch:
    expression: |
      {{ bcrypt (param "password") (pluck .variable_actions_fetchemail "password") "Password" }}
    invalidPath: $response.malformed
    validPath: $action.gentoken
actions:
  fetchemail:
    fail: $response.invalidCreds
    type: fetch
    config:
      single: true
      shouldFail: true
      integrationID: mongo
      table: users
      filters:
        - field: email
          operation: "=="
          comparator: '{{ param "email" }}'
    next: $conditional.passwordMatch
  gentoken:
    type: jwt
    config:
      key: "test"
      field: '{{ pluck .variable_actions_fetchemail "email" }}'
    next: $response.success
responses:
  malformed:
    template: '{ "error": {{ .error }} }'
    type: template
    code: 400
  invalidCreds:
    template: '{"error": "Invalid Credentials" }'
    code: 401
    type: template
  success:
    template: '{ "token" : "{{ stringescape .variable_actions_gentoken }}" }'
    code: 200
    type: template
