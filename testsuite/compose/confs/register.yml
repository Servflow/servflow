id: register
http:
  listenPath: register
  method: POST
  next: $conditional.validate
conditionals:
  validate:
    expression: |
      {{ and
                (notempty (param "email") "Email")
                (email (param "email") "Email" )
                (notempty (param "password") "Password")
                (notempty (param "name") "Name")
                }}
    validPath: $action.fetchemail
    invalidPath: $response.400
  userExists:
    expression: |
      {{  empty .variable_actions_fetchemail "User" }}
    validPath: $action.encryptpass
    invalidPath: $response.exists
actions:
  fetchemail:
    type: fetch
    config:
      integrationID: mongo
      table: users
      filters:
        - field: email
          operation: "=="
          comparator: '{{ param "email" }}'
    next: $conditional.userExists

  encryptpass:
    type: hash
    config:
      value: '{{ param "password" }}'
      algorithm: bcrypt
    next: $action.storedb

  storedb:
    type: store
    config:
      integrationID: mongo
      table: users
      fields:
        email: '{{ param "email" }}'
        password: "{{ .variable_actions_encryptpass }}"
        name: '{{ param "name" }}'
    next: $response.200

responses:
  "200":
    type: template
    template: |
      {
        "success": true
      }
    code: 200

  "400":
    type: template
    template: |
      {
        "errors": {{ .error }}
      }
    code: 400

  exists:
    type: template
    template: |
      {
        "errors": ["user already exists"]
      }
    code: 400
